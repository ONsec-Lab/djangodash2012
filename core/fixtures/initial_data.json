[{
    "pk": 1,
    "model": "core.tutorial",
    "fields": {
        "app_name": "hellodjango",
        "title": "django first tutorial"
    }
}, {
    "pk": 1,
    "model": "core.step",
    "fields": {
        "file_path": "models.py",
        "num": 1,
        "description": "<p>Let\u2019s learn by example.<p>\r\n\r\n<p>Throughout this tutorial, we\u2019ll walk you through the creation of a basic poll application.</p>\r\n\r\n<p>It\u2019ll consist of two parts:</p>\r\n\r\n<ul><li>A public site that lets people view polls and vote in them.</li>\r\n<li>An admin site that lets you add, change and delete polls.</li>\r\n</ul>\r\n\r\n<blockquote><p>If you\u2019re having trouble going through this tutorial, please post a message to django-users or drop by #django on irc.freenode.net to chat with other Django users who might be able to help.</p></blockquote>\r\n\r\n<h3>Creating models</h3>\r\n<p>Now that your environment \u2014 a \"project\" \u2014 is set up, you're set to start doing work.</p>\r\n\r\n<p>Each application you write in Django consists of a Python package, somewhere on your Python path, that follows a certain convention. Django comes with a utility that automatically generates the basic directory structure of an app, so you can focus on writing code rather than creating directories.</p>\r\n<pre>\r\nfrom django.db import models\r\n\r\nclass Poll(models.Model):\r\n    question = models.CharField(max_length=200)\r\n    pub_date = models.DateTimeField('date published')\r\n\r\nclass Choice(models.Model):\r\n    poll = models.ForeignKey(Poll)\r\n    choice = models.CharField(max_length=200)\r\n    votes = models.IntegerField()\r\n</pre>",
        "tutorial": 1,
        "title": "Django models"
    }
}, {
    "pk": 2,
    "model": "core.step",
    "fields": {
        "file_path": "urls.py",
        "num": 2,
        "description": "Some urls tutorial",
        "tutorial": 1,
        "title": "Django urls"
    }
}]